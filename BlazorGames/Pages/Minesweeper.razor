@page "/minesweeper"
@using BlazorGames.Models.Minesweeper;

@code {
    GameBoard board = new GameBoard();

    public int GetPlace(int value, int place)
    {
        return ((value % (place * 10)) - (value % place)) / place;
    }
}

<h2>
    Minesweeper
</h2>

<h3>
    @if (board.Status == Models.Minesweeper.Enums.GameStatus.Completed)
    {
        <text>Congrats!</text><button class="btn btn-success" @onclick="@(() => board.Reset())">Reset</button>
    }
    else if (board.Status == Models.Minesweeper.Enums.GameStatus.Failed)
    {
        <text>Whoops!</text><button class="btn btn-success" @onclick="@(() => board.Reset())">Reset</button>
    }
    else if (board.Status == Models.Minesweeper.Enums.GameStatus.InProgress)
    {
        <span>@board.MinesRemaining() Remaining</span>
    }
    else
    {
        <span>Let's play!</span>
    }
</h3>

<div class="minesweeper-game minesweeper-medium">
    <div class="minesweeper-board">
        @{
            var maxWidth = board.Width + 1;
            var maxHeight = board.Height + 1;
        }

        @*Build the upper section first*@
        @for (int i = 0; i < maxWidth; i++)
        {
            @if(i == 0)
            {
                <div class="minesweeper-border-topleft"></div>
            }
            else if (i == maxWidth)
            {
                <div class="minesweeper-border-topright"></div>
            }
            else
            {
                <div class="minesweeper-border-horizontal"></div>
            }
        }

        @for (int i = 0; i <= maxWidth; i++)
        {
        <div class="minesweeper-column">
            @for (int j = 0; j <= maxHeight; j++)
            {
                int x = i;
                int y = j;

                if (x == 0 && y == 0)
                {
                    <div class="minesweeper-border-jointleft"></div>
                }
                else if (x == 0 && y == maxHeight)
                {
                    <div class="minesweeper-border-bottomleft"></div>
                }
                else if (x == maxWidth && y == 0)
                {
                    <div class="minesweeper-border-jointright"></div>
                }
                else if (x == maxWidth && y == maxHeight)
                {
                    <div class="minesweeper-border-bottomright"></div>
                }
                else if(y == 0 || y == maxHeight)
                {
                    <div class="minesweeper-border-horizontal"></div>
                }
                else if(x == 0 || x == maxWidth)
                {
                    <div class="minesweeper-border-vertical"></div>
                }
                else
                {
                    var currentPanel = board.Panels.First(m => m.X == x && m.Y == y);
                    if (currentPanel.IsRevealed)
                    {
                        if (currentPanel.IsMine)
                        {
                            <div class="minesweeper-gamepiece minesweeper-mine"></div>
                        }
                        else if (currentPanel.AdjacentMines == 0)
                        {
                            <div class="minesweeper-gamepiece minesweeper-0"></div>
                        }
                        else
                        {
                            <div class="minesweeper-gamepiece minesweeper-@currentPanel.AdjacentMines">@currentPanel.AdjacentMines</div>
                        }
                    }
                    else if (currentPanel.IsFlagged)
                    {
                        <div class="minesweeper-gamepiece minesweeper-flagged" @oncontextmenu="@(() => board.FlagPanel(x, y))" @oncontextmenu:preventDefault></div>
                    }
                    else
                    {
                        <div class="minesweeper-gamepiece minesweeper-unrevealed" @onclick="@(() => board.MakeMove(x, y))" @oncontextmenu:preventDefault @oncontextmenu="@(() => board.FlagPanel(x, y))">
                        </div>
                    }
                }
            }
        </div>
        }
    </div>
</div>