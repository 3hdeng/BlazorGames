@page "/yahtzee"

@using BlazorGames.Models.Yahtzee; 
@using BlazorGames.Models.Yahtzee.Enums;

    <h3>
        Yahtzee&trade;
        @if (IsGameOver)
        {
            <button class="btn btn-success" @onclick="@(() => Initialize())">Reset</button>
        }
    </h3>

@code {
    public DieCollection Dice { get; set; } = new DieCollection();

    public PlayCollection PlaysMade { get; set; } = new PlayCollection();

    public int TurnsRemaining { get; set; } = 13;

    public int RollsRemaining { get; set; } = 3;

    public bool IsStartOfTurn { get { return RollsRemaining >= 3; } }

    public bool IsGameOver { get { return TurnsRemaining <= 0; } }

    public int TotalScore { get { return PlaysMade.GetTotal(); } }

    public Yahtzee()
    {
        Initialize();
    }

    public void Initialize()
    {
        Dice.Reset();
        Dice.Add(1);
        Dice.Add(2);
        Dice.Add(3);
        Dice.Add(4);
        Dice.Add(5);

        PlaysMade.Reset();
        TurnsRemaining = 13;
        RollsRemaining = 3;
    }

    public void RollDice()
    {
        Dice.Roll();
        RollsRemaining--;
    }

    public void NextTurn()
    {
        RollsRemaining = 3;
        TurnsRemaining--;
        Dice.Free();
    }

    public bool CanMakePlay(PlayType type)
    {
        switch (type)
        {
            case PlayType.Ones:
                return Dice.HasThreeOnes();

            case PlayType.Twos:
                return Dice.HasThreeTwos();

            case PlayType.Threes:
                return Dice.HasThreeThrees();

            case PlayType.Fours:
                return Dice.HasThreeFours();

            case PlayType.Fives:
                return Dice.HasThreeFives();

            case PlayType.Sixes:
                return Dice.HasThreeSixes();

            case PlayType.Yahtzee:
            case PlayType.BonusYahtzee:
                return Dice.HasYahtzee();

            case PlayType.ThreeOfAKind:
                return Dice.HasThreeOfAKind();

            case PlayType.FourOfAKind:
                return Dice.HasFourOfAKind();

            case PlayType.FullHouse:
                return Dice.HasFullHouse();

            case PlayType.SmallStraight:
                return Dice.HasSmallStraight();

            case PlayType.LargeStraight:
                return Dice.HasLargeStraight();

            case PlayType.Chance:
                return true;

            default: return false;
        }
    }

    public void ClaimPlay(PlayType type)
    {
        switch (type)
        {
            case PlayType.Ones:
                PlaysMade.Add(type, Dice.GetSum(1));
                break;

            case PlayType.Twos:
                PlaysMade.Add(type, Dice.GetSum(2));
                break;

            case PlayType.Threes:
                PlaysMade.Add(type, Dice.GetSum(3));
                break;

            case PlayType.Fours:
                PlaysMade.Add(type, Dice.GetSum(4));
                break;

            case PlayType.Fives:
                PlaysMade.Add(type, Dice.GetSum(5));
                break;

            case PlayType.Sixes:
                PlaysMade.Add(type, Dice.GetSum(6));
                break;

            case PlayType.Yahtzee:
                PlaysMade.Add(type, 50);
                break;

            case PlayType.BonusYahtzee:
                PlaysMade.Add(type, 100);
                break;

            case PlayType.ThreeOfAKind:
                PlaysMade.Add(type, Dice.GetOfAKindTotal(3));
                break;

            case PlayType.FourOfAKind:
                PlaysMade.Add(type, Dice.GetOfAKindTotal(4));
                break;

            case PlayType.FullHouse:
                PlaysMade.Add(type, 25);
                break;

            case PlayType.SmallStraight:
                PlaysMade.Add(type, 30);
                break;

            case PlayType.LargeStraight:
                PlaysMade.Add(type, 40);
                break;

            case PlayType.Chance:
                PlaysMade.Add(type, Dice.Dice.Sum(x => x.Value));
                break;
        }

        NextTurn();
    }

    public void ScratchPlay(PlayType type)
    {
        PlaysMade.Add(type, 0);
        NextTurn();
    }

    public string GetRank()
    {
        if (!IsGameOver) return "Finish the game first!";

        if (TotalScore <= 112) return "D";

        if (TotalScore > 112 && TotalScore <= 168) return "C";

        if (TotalScore > 168 && TotalScore <= 224) return "B";

        if (TotalScore > 224 && TotalScore <= 280) return "A";

        if (TotalScore > 280 && TotalScore <= 364) return "S";

        if (TotalScore > 364) return "S+";

        return "";
    }
}

<div class="container">
    <div class="row">
        <div class="col-2">
            @for (int i = 0; i < Dice.Dice.Count; i++)
            {
                var x = i;
                var die = Dice.Dice[x];
                <div class="row">
                    <div class="col">
                        @if (IsStartOfTurn)
                        {
                            <i class="fas fa-5x fa-dice-@die.GetClassName()"></i>
                        }
                        else if (Dice.Dice[x].IsHeld)
                        {
                            <i class="fas fa-5x fa-dice-@die.GetClassName() text-primary" @onclick="@(() => die.Hold())"></i>
                        }
                        else
                        {
                            <i class="fas fa-5x fa-dice-@die.GetClassName()" @onclick="@(() => die.Hold())"></i>
                        }
                    </div>
                </div>
            }
            <div class="row">
                <div class="col">
                    @if (RollsRemaining > 0 && !IsGameOver)
                    {
                        <a class="btn btn-primary" @onclick:preventDefault @onclick="@(() => RollDice())">Roll</a>
                    }
                    else if (IsGameOver)
                    {
                        <text>Thanks for playing!<br />Final score: @TotalScore <br />Rank: @GetRank()</text>
                    }
                    else
                    {
                        <a class="btn btn-primary disabled" @onclick:preventDefault @onclick="@(() => RollDice())">Roll</a><text>Please mark a score.</text>
                    }
                </div>
            </div>
        </div>
        <div class="col-10">
            <div class="row">
                <div class="col">
                    Scoreboard (Total Score: @TotalScore)
                </div>
            </div>
            <div class="row">
                <div class="col-4">
                    Turns Remaining: @TurnsRemaining
                </div>
                <div class="col-4">
                    Rolls Remaining This Turn: @RollsRemaining
                </div>
            </div>
            @foreach (PlayType type in (PlayType[])Enum.GetValues(typeof(PlayType)))
            {
                <ScorecardRow PlayType="type"
                                RollsRemaining="RollsRemaining"
                                Score="PlaysMade.GetScore(type)"
                                IsStartOfTurn="IsStartOfTurn"
                                ScratchPlay="@(() => ScratchPlay(type))"
                                HasPlay="PlaysMade.HasPlay(type)"
                                HasYahtzee="PlaysMade.HasPlay(PlayType.Yahtzee)"
                                CanMakePlay="@CanMakePlay(type)"
                                ClaimPlay="@(() => ClaimPlay(type))" />
            }
        </div>
    </div>
</div>