@page "/gameoflife"

@using BlazorGames.Models.GameOfLife;
@using BlazorGames.Models.GameOfLife.Enums;
@using BlazorGames.Models.Common; 

@code {
    Board board = new Board(20, 20);

    public async Task Run()
    {
        board.RunSimulation = true;
        while (board.RunSimulation)
        {
            board.CalculateNextGeneration();
            StateHasChanged();
            await Task.Delay(1000);
        }
    }

    public void Stop()
    {
        board.RunSimulation = false;
    }

    public void SetTheme(ChangeEventArgs e)
    {
        board.Theme = (Theme)Enum.Parse(typeof(Theme), e.Value.ToString());
        StateHasChanged();
    }
}

<PageTitle Title="Conway's Game of Life" />
<p class="font-italic">
    Special thanks to <a href="https://khalidabuhakmeh.com/program-the-game-of-life-with-csharp-and-emojis">Khalid Abuhakmeh</a> for the idea.
</p>

<div class="container">
    <div class="row">
        <div class="col-4">
            <label>Theme: </label>
            <select @onchange="@SetTheme">
                <option value="@Theme.Faces">@Theme.Faces.GetDisplayDescription()</option>
                <option value="@Theme.Cats">@Theme.Cats.GetDisplayDescription()</option>
                <option value="@Theme.Aliens">@Theme.Aliens.GetDisplayDescription()</option>
                <option value="@Theme.Boxes">@Theme.Boxes.GetDisplayDescription()</option>
            </select>
        </div>
        <div class="col-2">
            @if (board.RunSimulation)
            {
                <button class="btn btn-primary" disabled>Randomize</button>
            }
            else
            {
                <button class="btn btn-primary" @onclick="(() => board.SetRandom())">Randomize</button>
            }
        </div>
        <div class="col-2">
            @if (board.RunSimulation)
            {
                <button class="btn btn-secondary" @onclick="(() => Stop())"><i class="fa fa-stop"></i> Stop</button>
            }
            else
            {
                <button class="btn btn-primary" @onclick="(async () => await Run())"><i class="fa fa-play"></i> Run</button>
            }
        </div>
    </div>
</div>

<div class="container">
    @for (int i = 1; i < board.Rows; i++)
    {
        <div class="row flex-nowrap gameoflife-container">
            @for (int j = 1; j < board.Columns; j++)
            {
                var x = i;
                var y = j;
                var cell = board.Grid[x, y];

                if (cell == Status.Alive)
                {
                    <div class="gameoflife-alivecell-@board.Theme.GetDisplayName()"
                         @onclick="(() => board.ChangeStatus(x,y))"></div>
                }
                else
                {
                    <div class="gameoflife-cell gameoflife-deadcell-@board.Theme.GetDisplayName()"
                         @onclick="(() => board.ChangeStatus(x,y))"></div>
                }
            }
        </div>
    }
</div>

<hr />
<h2>What Is This?</h2>

<p>
    <a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life">Conway's Game of Life</a>
    is a cellular automaton simulation developed by 
    <a href="https://en.wikipedia.org/wiki/John_Horton_Conway">John Conway</a>
    in 1970. 
</p>

<p>
    The game area is comprised of cells, each of which can be either alive or dead at any given time.
    Whether each cell is alive or dead is dependent on the state of its eight neighbor cells.
</p>

<h4>Rules</h4>
<p>
    The rules for the Game of Life are as follows.
</p>

<ol>
    <li>Any live cell with two or three live neighbours continues to be alive.</li>
    <li>Any dead cell with exactly three live neighbours becomes a live cell.</li>
    <li>All other live cells die in the next generation. Similarly, all other dead cells stay dead.</li>
</ol>

<hr />
<h2>How To Make Conway's Game of Life in Blazor</h2>

<p>
    Coming soon!
</p>